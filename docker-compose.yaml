services:
  wiki:
    env_file:
      - config.env
    build:
      context: ./bergwerk-wiki
    restart: always
    networks:
      - netzwerk
    depends_on:
      db:
        condition: service_healthy

  api:
    env_file:
      - config.env
    build:
      context: ./bergwerk-api
    restart: always
    volumes:
      - ./bergwerk-api/app:/app  
    networks:
      - netzwerk
    depends_on:
      wiki:
        condition: service_started

  socketio:
    build:
      context: ./bergwerk-socketio
    restart: always
    volumes:
      - ./bergwerk-socketio/app:/app
    networks:
      - netzwerk
    depends_on:
      wiki:
        condition: service_started
      api:
        condition: service_started


  caddy:
    image: caddy:latest
    env_file:
      - config.env
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./bergwerk-caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./bergwerk-caddy/html:/var/www/html
      - ./persist/caddy_data:/data
      - ./persist/caddy_config:/config
    networks:
      - netzwerk
    depends_on:
      wiki:
        condition: service_started
      api:
        condition: service_started
      socketio:
        condition: service_started

  admin:
    build: ./bergwerk-admin
    restart: always
    depends_on:
      - redis
    volumes:
      - ./bergwerk-admin/app:/app
    networks:
      - netzwerk

  db:
    env_file:
      - config.env
    build:
      context: ./bergwerk-db
    restart: always
    ports:
      - "3307:3306"
    volumes:
      - ./persist/db_data:/var/lib/mysql
    networks:
      - netzwerk
    healthcheck:
        test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
        timeout: 20s
        retries: 10

  cron:
    env_file:
      - config.env
    build:
      context: ./bergwerk-cron
    restart: always
    volumes:
      - ./bergwerk-cron/app:/usr/src/app
    networks:
      - netzwerk
    depends_on:
      wiki:
        condition: service_started
      db:
        condition: service_healthy

  # ollama:
  #   image: ollama/ollama:latest
  #   volumes:
  #     - ./persist/ollama_code:/code
  #     - ./persist/ollama:/root/.ollama
  #   pull_policy: always
  #   tty: true
  #   restart: always
  #   environment:
  #     - OLLAMA_KEEP_ALIVE=24h
  #     - OLLAMA_HOST=0.0.0.0
  #   networks:
  #     - netzwerk

  redis:
    image: redis:latest
    restart: always
    networks:
      - netzwerk

  init:
    build: ./bergwerk-init
    depends_on:
      - redis
    command: ["python", "load_config.py"]
    volumes:
      - ./config.yaml:/app/config.yaml
      - ./config.yaml.example:/app/config.yaml.example
    networks:
      - netzwerk

networks:
  netzwerk:
    driver: bridge
  
